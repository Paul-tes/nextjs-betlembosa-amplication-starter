/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";

import {
  Prisma,
  RoomList as PrismaRoomList,
  User as PrismaUser,
  WishList as PrismaWishList,
} from "@prisma/client";

export class RoomListServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(args: Omit<Prisma.RoomListCountArgs, "select">): Promise<number> {
    return this.prisma.roomList.count(args);
  }

  async roomLists<T extends Prisma.RoomListFindManyArgs>(
    args: Prisma.SelectSubset<T, Prisma.RoomListFindManyArgs>
  ): Promise<PrismaRoomList[]> {
    return this.prisma.roomList.findMany<Prisma.RoomListFindManyArgs>(args);
  }
  async roomList<T extends Prisma.RoomListFindUniqueArgs>(
    args: Prisma.SelectSubset<T, Prisma.RoomListFindUniqueArgs>
  ): Promise<PrismaRoomList | null> {
    return this.prisma.roomList.findUnique(args);
  }
  async createRoomList<T extends Prisma.RoomListCreateArgs>(
    args: Prisma.SelectSubset<T, Prisma.RoomListCreateArgs>
  ): Promise<PrismaRoomList> {
    return this.prisma.roomList.create<T>(args);
  }
  async updateRoomList<T extends Prisma.RoomListUpdateArgs>(
    args: Prisma.SelectSubset<T, Prisma.RoomListUpdateArgs>
  ): Promise<PrismaRoomList> {
    return this.prisma.roomList.update<T>(args);
  }
  async deleteRoomList<T extends Prisma.RoomListDeleteArgs>(
    args: Prisma.SelectSubset<T, Prisma.RoomListDeleteArgs>
  ): Promise<PrismaRoomList> {
    return this.prisma.roomList.delete(args);
  }

  async getRoomCreatedBy(parentId: string): Promise<PrismaUser | null> {
    return this.prisma.roomList
      .findUnique({
        where: { id: parentId },
      })
      .roomCreatedBy();
  }

  async getWishList(parentId: string): Promise<PrismaWishList | null> {
    return this.prisma.roomList
      .findUnique({
        where: { id: parentId },
      })
      .wishList();
  }
}
