/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import * as nestAccessControl from "nest-access-control";
import * as gqlACGuard from "../../auth/gqlAC.guard";
import { GqlDefaultAuthGuard } from "../../auth/gqlDefaultAuth.guard";
import * as common from "@nestjs/common";
import { AclFilterResponseInterceptor } from "../../interceptors/aclFilterResponse.interceptor";
import { AclValidateRequestInterceptor } from "../../interceptors/aclValidateRequest.interceptor";
import { RoomList } from "./RoomList";
import { RoomListCountArgs } from "./RoomListCountArgs";
import { RoomListFindManyArgs } from "./RoomListFindManyArgs";
import { RoomListFindUniqueArgs } from "./RoomListFindUniqueArgs";
import { CreateRoomListArgs } from "./CreateRoomListArgs";
import { UpdateRoomListArgs } from "./UpdateRoomListArgs";
import { DeleteRoomListArgs } from "./DeleteRoomListArgs";
import { TripFindManyArgs } from "../../trip/base/TripFindManyArgs";
import { Trip } from "../../trip/base/Trip";
import { User } from "../../user/base/User";
import { WishList } from "../../wishList/base/WishList";
import { RoomListService } from "../roomList.service";
@common.UseGuards(GqlDefaultAuthGuard, gqlACGuard.GqlACGuard)
@graphql.Resolver(() => RoomList)
export class RoomListResolverBase {
  constructor(
    protected readonly service: RoomListService,
    protected readonly rolesBuilder: nestAccessControl.RolesBuilder
  ) {}

  @graphql.Query(() => MetaQueryPayload)
  @nestAccessControl.UseRoles({
    resource: "RoomList",
    action: "read",
    possession: "any",
  })
  async _roomListsMeta(
    @graphql.Args() args: RoomListCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => [RoomList])
  @nestAccessControl.UseRoles({
    resource: "RoomList",
    action: "read",
    possession: "any",
  })
  async roomLists(
    @graphql.Args() args: RoomListFindManyArgs
  ): Promise<RoomList[]> {
    return this.service.roomLists(args);
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => RoomList, { nullable: true })
  @nestAccessControl.UseRoles({
    resource: "RoomList",
    action: "read",
    possession: "own",
  })
  async roomList(
    @graphql.Args() args: RoomListFindUniqueArgs
  ): Promise<RoomList | null> {
    const result = await this.service.roomList(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => RoomList)
  @nestAccessControl.UseRoles({
    resource: "RoomList",
    action: "create",
    possession: "any",
  })
  async createRoomList(
    @graphql.Args() args: CreateRoomListArgs
  ): Promise<RoomList> {
    return await this.service.createRoomList({
      ...args,
      data: {
        ...args.data,

        roomCreatedBy: {
          connect: args.data.roomCreatedBy,
        },

        wishList: args.data.wishList
          ? {
              connect: args.data.wishList,
            }
          : undefined,
      },
    });
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => RoomList)
  @nestAccessControl.UseRoles({
    resource: "RoomList",
    action: "update",
    possession: "any",
  })
  async updateRoomList(
    @graphql.Args() args: UpdateRoomListArgs
  ): Promise<RoomList | null> {
    try {
      return await this.service.updateRoomList({
        ...args,
        data: {
          ...args.data,

          roomCreatedBy: {
            connect: args.data.roomCreatedBy,
          },

          wishList: args.data.wishList
            ? {
                connect: args.data.wishList,
              }
            : undefined,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => RoomList)
  @nestAccessControl.UseRoles({
    resource: "RoomList",
    action: "delete",
    possession: "any",
  })
  async deleteRoomList(
    @graphql.Args() args: DeleteRoomListArgs
  ): Promise<RoomList | null> {
    try {
      return await this.service.deleteRoomList(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.ResolveField(() => [Trip], { name: "trips" })
  @nestAccessControl.UseRoles({
    resource: "Trip",
    action: "read",
    possession: "any",
  })
  async findTrips(
    @graphql.Parent() parent: RoomList,
    @graphql.Args() args: TripFindManyArgs
  ): Promise<Trip[]> {
    const results = await this.service.findTrips(parent.id, args);

    if (!results) {
      return [];
    }

    return results;
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.ResolveField(() => User, {
    nullable: true,
    name: "roomCreatedBy",
  })
  @nestAccessControl.UseRoles({
    resource: "User",
    action: "read",
    possession: "any",
  })
  async getRoomCreatedBy(
    @graphql.Parent() parent: RoomList
  ): Promise<User | null> {
    const result = await this.service.getRoomCreatedBy(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.ResolveField(() => WishList, {
    nullable: true,
    name: "wishList",
  })
  @nestAccessControl.UseRoles({
    resource: "WishList",
    action: "read",
    possession: "any",
  })
  async getWishList(
    @graphql.Parent() parent: RoomList
  ): Promise<WishList | null> {
    const result = await this.service.getWishList(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }
}
